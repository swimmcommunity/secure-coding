{
    "id": "QqNtlGQkT98SmOKiYrCd",
    "name": "Adding Pythonic Salt",
    "dod": "Make the tests pass ",
    "description": "In this Unit you will implement a good mechanism to store passwords using Salt.\n\nWe will not focus on creating a real DB here (as this is out of scope), but rather use a dictionary instead with the following format:\n\n`{username: (hashed_password, salt)}`\n\nWhere `hashed_password` is the result of applying `sha256` on the concatenation of the user's password and the `salt`.\n\nThe `salt` should be randomly chosen for every user, and is generated by the provided function - `get_random_salt`.\n\nImplement `register_user` and `login` according to their implementation.",
    "summary": "Now you know how to implement a good password storage mechanism! 👏🏻\n\nThere is a lot more to know about secure salt implementation - you can find out more [here](https://crackstation.net/hashing-security.htm) if you're interested.",
    "hunksOrder": [
        "python/adding_salt.py_0",
        "python/adding_salt.py_1"
    ],
    "tests": [
        "python3 -m doctest python/adding_salt.py"
    ],
    "hints": [],
    "play_mode": "handson",
    "swimmPatch": {
        "python/adding_salt.py": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/python/adding_salt.py b/python/adding_salt.py\nindex 89b22d7..bd6342e 100644\n--- a/python/adding_salt.py\n+++ b/python/adding_salt.py",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -17,13 +17,7 @@",
                        "     >>> my_database[b'swimm_user'][0] == my_database[b'another_user'][0]",
                        "     False",
                        "     \"\"\"",
                        "-    if username in database:",
                        "+    pass",
                        "-        # This user already exists",
                        "-        return False",
                        "-",
                        "-    salt = get_random_salt()",
                        "-    hashed_value = sha256(password+salt).hexdigest()",
                        "-    database[username] = (hashed_value, salt)",
                        " ",
                        " ",
                        " def get_random_salt(size=8):"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -45,8 +39,4 @@",
                        "     >>> login(my_database, b'swimm_user', b'swimm_password')",
                        "     True",
                        "     \"\"\"",
                        "-    if username not in database:",
                        "+    pass",
                        "-        return False",
                        "-",
                        "-    (hashed_password, salt) = database[username]",
                        "-    return sha256(password+salt).hexdigest() == hashed_password"
                    ]
                }
            ]
        }
    },
    "app_version": "0.3.0",
    "file_version": "1.0.4"
}