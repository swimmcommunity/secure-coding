{
    "id": "paKYzTIkY1OBsPHSd9H0",
    "name": "Simple Bruteforce with Python",
    "dod": "implement `bruteforce_generator` and find the password",
    "description": "Let's start cracking passwords.\n\n\nIn `simple_bruteforce.py`, the function `my_bruteforce` goes through all the options of a passwords consisting of 1 to 8 characters, where each character can be `a`, `b`, `c`, `d`, `e`, `f` or `g`. It then uses `is_password` on the current guess to check if it's indeed the password (the implementation of `is_password` is irrelevant for this Unit).\n\n\nFind the right password!\nFor that, you will have to implement `bruteforce_generator(characters, min_length, max_length)` and then call `my_bruteforce()`.\n\n\nGood luck!",
    "summary": "Congrats! You have cracked a password using a bruteforce attack.\n\nWhat does that mean about how we deal with passwords?\n\nWell, obviously short passwords won't be enough. What will happen with longer passwords? It will definitely take longer to bruteforce them, perhaps much longer. Are they completely safe? We will consider it in the next Units.",
    "hunksOrder": [
        "python/simple_bruteforce.py_0",
        "python/simple_bruteforce.py_1"
    ],
    "tests": [
        "python3 -m doctest python/simple_bruteforce.py"
    ],
    "hints": [
        "Perhaps `itertools` module can make your life easier"
    ],
    "play_mode": "handson",
    "swimmPatch": {
        "python/simple_bruteforce.py": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/python/simple_bruteforce.py b/python/simple_bruteforce.py\nindex 83333da..73a5bf3 100644\n--- a/python/simple_bruteforce.py\n+++ b/python/simple_bruteforce.py",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -1,4 +1,3 @@",
                        "-import itertools",
                        " from hashlib import sha256",
                        " ",
                        " "
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": []
                    },
                    "hunkDiffLines": [
                        "@@ -10,10 +9,7 @@",
                        "     >>> list(my_generator)",
                        "     ['a', 'b', 'c', 'aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc', 'aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc', 'aaaa', 'aaab', 'aaac', 'aaba', 'aabb', 'aabc', 'aaca', 'aacb', 'aacc', 'abaa', 'abab', 'abac', 'abba', 'abbb', 'abbc', 'abca', 'abcb', 'abcc', 'acaa', 'acab', 'acac', 'acba', 'acbb', 'acbc', 'acca', 'accb', 'accc', 'baaa', 'baab', 'baac', 'baba', 'babb', 'babc', 'baca', 'bacb', 'bacc', 'bbaa', 'bbab', 'bbac', 'bbba', 'bbbb', 'bbbc', 'bbca', 'bbcb', 'bbcc', 'bcaa', 'bcab', 'bcac', 'bcba', 'bcbb', 'bcbc', 'bcca', 'bccb', 'bccc', 'caaa', 'caab', 'caac', 'caba', 'cabb', 'cabc', 'caca', 'cacb', 'cacc', 'cbaa', 'cbab', 'cbac', 'cbba', 'cbbb', 'cbbc', 'cbca', 'cbcb', 'cbcc', 'ccaa', 'ccab', 'ccac', 'ccba', 'ccbb', 'ccbc', 'ccca', 'cccb', 'cccc']",
                        "     \"\"\"",
                        "-    for length in range(min_length, max_length + 1):",
                        "+    pass",
                        "-        product = itertools.product(characters, repeat=length)",
                        "-        for current in product:",
                        "-            yield ''.join(current)",
                        " ",
                        " ",
                        " def is_password(password):"
                    ]
                }
            ]
        }
    },
    "app_version": "0.3.0",
    "file_version": "1.0.4"
}